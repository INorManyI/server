volumes:
    public:
    public2:
    postgres-data:
    redis-data:

services:
    postgres:
        image: postgres:17.0-alpine3.19
        volumes:
            # To save database data in persistent docker volume
            - postgres-data:/var/lib/postgresql/data
        environment:
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD}'
            POSTGRES_DB: '${DB_DATABASE}'
            PGPASSWORD: '${DB_PASSWORD}'
        env_file:
            - .env
        ports:
            - ${DB_PORT}:5432
        networks:
            - app
        healthcheck:
            test: ["CMD", "pg_isready", '-q', '-d', '${DB_DATABASE}', '-U', '${DB_USERNAME}']
            timeout: 5s
            retries: 3

    redis:
        image: 'bitnami/redis:7.4.1'
        #volumes:
            # To save redis data in persistent docker volume
            #- redis-data:/bitnami/redis/data
        environment:
            - REDIS_PASSWORD=${REDIS_PASSWORD}
        ports:
            - ${REDIS_PORT}:6379
        networks:
            - app
        command: /opt/bitnami/scripts/redis/run.sh
        healthcheck:
            test: ["CMD", "redis-cli", 'ping']
            retries: 3
            timeout: 5s

    # Web server
    web:
        image: nginx_img
        build:
            context: .
            dockerfile: .docker/nginx/Dockerfile
        volumes:
            # To share public data (css, js, images) between nginx and php
            - public:/var/www/html/public
            - public2:/var/www/html/storage/app/public
        env_file:
            - .env
        ports:
            - "80:80"
        networks:
            - app

    php:
        image: php_img
        build:
            context: .
            dockerfile: .docker/php/Dockerfile
        volumes:
            # To share public data (css, js, images) between nginx and php
            - public:/var/www/html/public
            - public2:/var/www/html/storage/app/public
        env_file:
            - .env
        networks:
            - app

        develop:
            watch:
                - action: rebuild
                  path: ./app
                  target: /var/www/html/app
                - action: rebuild
                  path: ./bootstrap
                  target: /var/www/html/bootstrap
                - action: rebuild
                  path: ./config
                  target: /var/www/html/config
                - action: rebuild
                  path: ./database
                  target: /var/www/html/database
                - action: rebuild
                  path: ./lang
                  target: /var/www/html/lang
                - action: rebuild
                  path: ./public
                  target: /var/www/html/public
                - action: rebuild
                  path: ./resources
                  target: /var/www/html/resources
                - action: rebuild
                  path: ./routes
                  target: /var/www/html/routes
                - action: rebuild
                  path: ./.env
                  target: /var/www/html/.env

    laravel-queue: # очередь фоновых задач
        image: php_img
        depends_on:
          - php
          - postgres
          - redis
        restart: "no"
        entrypoint: ["php", "artisan", "queue:work"]
        networks:
            - app

    laravel-schedule: # планировщик, добавляющий в очередь фоновые задачи
        image: php_img
        depends_on:
          - laravel-queue
        restart: "no"
        entrypoint: ["php", "artisan", "schedule:work"]
        networks:
            - app

    mailpit:
        image: axllent/mailpit
        container_name: mailpit
        ports:
            - 8025:8025
            - 1025:1025
        environment:
            MP_SMTP_AUTH_ACCEPT_ANY: 1
            MP_SMTP_AUTH_ALLOW_INSECURE: 1
        networks:
            - app

networks:
    app:
        driver: bridge
